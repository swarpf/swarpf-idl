// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxyapi

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProxyApiClient is the client API for ProxyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyApiClient interface {
	Register(ctx context.Context, in *ProxyApiOptions, opts ...grpc.CallOption) (*ProxyApiProviderResponse, error)
	Disconnect(ctx context.Context, in *ProxyApiOptions, opts ...grpc.CallOption) (*ProxyApiProviderResponse, error)
}

type proxyApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyApiClient(cc grpc.ClientConnInterface) ProxyApiClient {
	return &proxyApiClient{cc}
}

func (c *proxyApiClient) Register(ctx context.Context, in *ProxyApiOptions, opts ...grpc.CallOption) (*ProxyApiProviderResponse, error) {
	out := new(ProxyApiProviderResponse)
	err := c.cc.Invoke(ctx, "/proxyapi.ProxyApi/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyApiClient) Disconnect(ctx context.Context, in *ProxyApiOptions, opts ...grpc.CallOption) (*ProxyApiProviderResponse, error) {
	out := new(ProxyApiProviderResponse)
	err := c.cc.Invoke(ctx, "/proxyapi.ProxyApi/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyApiServer is the server API for ProxyApi service.
// All implementations must embed UnimplementedProxyApiServer
// for forward compatibility
type ProxyApiServer interface {
	Register(context.Context, *ProxyApiOptions) (*ProxyApiProviderResponse, error)
	Disconnect(context.Context, *ProxyApiOptions) (*ProxyApiProviderResponse, error)
	mustEmbedUnimplementedProxyApiServer()
}

// UnimplementedProxyApiServer must be embedded to have forward compatible implementations.
type UnimplementedProxyApiServer struct {
}

func (*UnimplementedProxyApiServer) Register(context.Context, *ProxyApiOptions) (*ProxyApiProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedProxyApiServer) Disconnect(context.Context, *ProxyApiOptions) (*ProxyApiProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedProxyApiServer) mustEmbedUnimplementedProxyApiServer() {}

func RegisterProxyApiServer(s *grpc.Server, srv ProxyApiServer) {
	s.RegisterService(&_ProxyApi_serviceDesc, srv)
}

func _ProxyApi_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyApiOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyapi.ProxyApi/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyApiServer).Register(ctx, req.(*ProxyApiOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyApi_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyApiOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyApiServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyapi.ProxyApi/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyApiServer).Disconnect(ctx, req.(*ProxyApiOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxyapi.ProxyApi",
	HandlerType: (*ProxyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ProxyApi_Register_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ProxyApi_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxyapi.proto",
}

// ProxyApiConsumerClient is the client API for ProxyApiConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyApiConsumerClient interface {
	OnReceiveApiEvent(ctx context.Context, in *ApiEvent, opts ...grpc.CallOption) (*empty.Empty, error)
}

type proxyApiConsumerClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyApiConsumerClient(cc grpc.ClientConnInterface) ProxyApiConsumerClient {
	return &proxyApiConsumerClient{cc}
}

func (c *proxyApiConsumerClient) OnReceiveApiEvent(ctx context.Context, in *ApiEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proxyapi.ProxyApiConsumer/OnReceiveApiEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyApiConsumerServer is the server API for ProxyApiConsumer service.
// All implementations must embed UnimplementedProxyApiConsumerServer
// for forward compatibility
type ProxyApiConsumerServer interface {
	OnReceiveApiEvent(context.Context, *ApiEvent) (*empty.Empty, error)
	mustEmbedUnimplementedProxyApiConsumerServer()
}

// UnimplementedProxyApiConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedProxyApiConsumerServer struct {
}

func (*UnimplementedProxyApiConsumerServer) OnReceiveApiEvent(context.Context, *ApiEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnReceiveApiEvent not implemented")
}
func (*UnimplementedProxyApiConsumerServer) mustEmbedUnimplementedProxyApiConsumerServer() {}

func RegisterProxyApiConsumerServer(s *grpc.Server, srv ProxyApiConsumerServer) {
	s.RegisterService(&_ProxyApiConsumer_serviceDesc, srv)
}

func _ProxyApiConsumer_OnReceiveApiEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyApiConsumerServer).OnReceiveApiEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyapi.ProxyApiConsumer/OnReceiveApiEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyApiConsumerServer).OnReceiveApiEvent(ctx, req.(*ApiEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyApiConsumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxyapi.ProxyApiConsumer",
	HandlerType: (*ProxyApiConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnReceiveApiEvent",
			Handler:    _ProxyApiConsumer_OnReceiveApiEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxyapi.proto",
}
